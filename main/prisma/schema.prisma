// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  AUTHOR
  REVIEWER
  CHAIR
}

model Conference {
  id                     String       @id @default(auto()) @map("_id") @db.ObjectId
  name                   String       @db.String
  description            String?      @db.String
  country                String       @db.String
  state                  String       @db.String
  startDate              DateTime     @db.Timestamp
  endDate                DateTime     @db.Timestamp
  paperSubmissionDueDate DateTime     @db.Timestamp
  externalConfURL        String?      @db.String
  domain                 String[]     @db.String
  nos                    Int          @db.Int
  submission             Submission[]
  createdBy               String  @db.ObjectId 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  participantIDs String[]   @db.ObjectId
  participants   User[]     @relation(fields: [participantIDs], references: [id])
  roles          UserRole[]
}

model Submission {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  conferenceId String   @db.ObjectId
  filePath     String   @db.String
  fileType     String   @db.String
  fromDomain   String   @db.String
  createdAt    DateTime @default(now()) @db.Timestamp
  updatedAt    DateTime @updatedAt @db.Timestamp

  conference Conference @relation(fields: [conferenceId], references: [id])
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String   @db.ObjectId
}

model UserRole {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  userId       String @db.ObjectId
  conferenceId String @db.ObjectId
  role         Role[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  conference Conference @relation(fields: [conferenceId], references: [id], onDelete: Cascade)

  @@unique([userId, conferenceId])
}

model User {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  email             String?      @unique @db.String
  password          String?      @db.String
  first_name        String?      @db.String
  last_name         String?      @db.String
  organization_name String?      @db.String
  emailVerified     DateTime?    @db.Timestamp
  image             String?      @db.String
  role              Role         @default(AUTHOR)
  accounts          Account[]
  conferenceIDs     String[]     @db.ObjectId
  conferences       Conference[] @relation(fields: [conferenceIDs], references: [id])
  roles             UserRole[]
  submissions       Submission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String  @db.String
  provider          String  @db.String
  providerAccountId String  @db.String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String? @db.String
  scope             String? @db.String
  id_token          String? @db.String
  session_state     String? @db.String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String   @db.String
  token      String   @db.String
  expires    DateTime @db.Timestamp

  @@unique([identifier, token])
}
