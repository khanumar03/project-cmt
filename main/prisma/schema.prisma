// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  AUTHOR
  REVIEWER
  CHAIR
}

enum Status {
  Pending
  Accepted
  Reject
}

type FileType {
  fieldname String @db.String
  originalname String @db.String
  encoding String @db.String
  mimetype String @db.String
  destination String @db.String
  filename String @db.String
  path String @db.String
  size Int @db.Int
}

type AuthorsType {
  email String @db.String
  firstname String @db.String
  lastname  String @db.String
  org       String @db.String
}

model Conference {
    id                     String       @id @default(auto()) @map("_id") @db.ObjectId
    name                   String       @db.String
    description            String?      @db.String
    country                String       @db.String
    state                  String       @db.String
    startDate              DateTime     @db.Timestamp
    endDate                DateTime     @db.Timestamp
    paperSubmissionDueDate DateTime     @db.Timestamp
    externalConfURL        String?      @db.String
    domain                 String[]     @db.String
    nos                    Int          @db.Int
    createdBy              String       @db.ObjectId

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    submission      Submission[]
    participantIDs String[]   @db.ObjectId
    participants   User[]     @relation(fields: [participantIDs], references: [id])
    roles          UserRole[]
}

model Submission {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    fromDomain   String  @db.String
    title        String   @db.String
    abstract     String  @db.String
    authors      AuthorsType[]
    contact      String   @db.String
    country       String  @db.String
    state         String   @db.String
    comment       String  @db.String
    status        Status  @default(Pending)        
    email         String  @db.String 
    createdAt    DateTime @default(now()) @db.Timestamp
    updatedAt    DateTime @updatedAt @db.Timestamp
    files       Files[]   
    conference  Conference @relation(fields: [conferenceId], references: [id])
    conferenceId String   @db.ObjectId
    createdBy   User       @relation(fields: [createdById], references: [id])
    createdById String     @db.ObjectId
}

model Files {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  metadata     FileType
  userID       String @db.ObjectId

  submission    Submission @relation(fields: [submissionID], references: [id], onDelete: Cascade)
  submissionID  String @db.ObjectId
}


model UserRole {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  userId       String @db.ObjectId
  conferenceId String @db.ObjectId
  role         Role[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  conference Conference @relation(fields: [conferenceId], references: [id], onDelete: Cascade)

  @@unique([userId, conferenceId])
}

model User {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  email             String?      @unique @db.String
  password          String?      @db.String
  first_name        String?      @db.String
  last_name         String?      @db.String
  organization_name String?      @db.String
  emailVerified     DateTime?    @db.Timestamp
  image             String?      @db.String
  role              Role         @default(AUTHOR)
  accounts          Account[]
  conferenceIDs     String[]     @db.ObjectId
  conferences       Conference[] @relation(fields: [conferenceIDs], references: [id])
  roles             UserRole[]
  submissions       Submission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String  @db.String
  provider          String  @db.String
  providerAccountId String  @db.String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String? @db.String
  scope             String? @db.String
  id_token          String? @db.String
  session_state     String? @db.String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String   @db.String
  token      String   @db.String
  expires    DateTime @db.Timestamp

  @@unique([identifier, token])
}
