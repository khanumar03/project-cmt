// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  email             String?   @unique @db.String
  password          String?   @db.String
  first_name        String?   @db.String
  last_name         String?   @db.String
  organization_name String?   @db.String
  emailVerified     DateTime? @db.Timestamp
  image             String?   @db.String
  accounts          Account[]

  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  conferences UserConference[]
  Paper       Paper[]
  Review      Review[]
}

model Conference {
  id                    String           @id @default(auto()) @map("_id") @db.ObjectId
  name                  String           @db.String
  location              String           @db.String
  startDate             DateTime
  endDate               DateTime
  submissionDueDate     DateTime
  externalConferenceURL String           @db.String
  subjectArea           String           @db.String
  // submissions 
  // tracks
  users                 UserConference[]
  papers                Paper[]
}

model Paper {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  title        String     @db.String
  abstract     String     @db.String
  authorId     String     @db.String
  author       User       @relation(fields: [authorId], references: [id])
  conferenceId String     @db.ObjectId
  conference   Conference @relation(fields: [conferenceId], references: [id])
  reviews      Review[]
}

model Review {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  content    String @db.String
  rating     Int
  reviewerId String @db.String
  reviewer   User   @relation(fields: [reviewerId], references: [id])
  paperId    String @db.String
  paper      Paper  @relation(fields: [paperId], references: [id])
}

model UserConference {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  userId       String     @db.ObjectId
  user         User       @relation(fields: [userId], references: [id])
  conferenceId String     @db.ObjectId
  conference   Conference @relation(fields: [conferenceId], references: [id])
}

enum Role {
  ADMIN
  REVIEWER
  AUTHOR
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String  @db.String
  provider          String  @db.String
  providerAccountId String  @db.String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String? @db.String
  scope             String? @db.String
  id_token          String? @db.String
  session_state     String? @db.String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String   @db.String
  token      String   @db.String
  expires    DateTime @db.Timestamp

  @@unique([identifier, token])
}
